
So, first thing I want to point out, that second link, which is a URL (https://presentations.leeclagett.com/monerokon2019) will hopefully, eventually contain the slides. So those of you watching the live feed, don't get too excited, that link doesn't work yet. And, as the title suggest, this talk will be about IP linkability to transactions.
[referring to first slide] So, the top portion is pretty much what's been implemented today, so far, but for chain privacy. The bottom portion is what the focus of this talk will be on and that is on protecting privacy on the source IP of the transaction. So the ones highlighted in red are pretty much what this talk is going to be about. The opportunistic encryption is something that will probably also go into Monero eventually, but that's just going to take some more time to research as well.

And because this is Monero we aren't just doing I2P and Tor, we're also adding white noise, and possibly something like Dandelion. It's not going to be Dandelion++, I should give that caveat, but there will be some additional mitigations for the things that Josh just talked about, with the, anybody that can observe multiple points on the total internet can, well, we'll just get into that I guess, as we go through the talk.
Okay, so these are sort of the three main threats that we're trying to address. The first one is probably not as well known as the last two. The first one is anyone that's attempting to make many connections throughout the network, in order to infer who is the possible origin. The next one is probably what most people would think, the ISP is just sort of monitoring your network passively. And the last one is anyone that's able to monitor multiple network points, that also enables even more information to be gleaned.

Again the Dandelion paper is probably the best resource on getting information about how this type of attack works, but effectively you make many connections to the network, and you try to learn the the network topology through a P2P administration protocol. You know, there's some basic bookkeeping in the protocol on how to, you have to spread information about your peers, about peers that you've seen, and this sort of leaks information. Also pretty much every transaction or blockchain broadcast will leak information as well because, you can sort of see how the information is flowing through the network if you have many connections on the network basically. And it's all statistical based so it's not guaranteed to work, and that's, and agin, see the details on the Dandelion paper. And so, to mitigate this, Dandelion++ proposal is designed to mitigate against this very specific type of spy, and I2P and Tor would also mitigate this issue but in a very different way.

Alright, so now, the ISP spy, I think the first bullet-point most people are probably, is what they're probably going to guess, the ISP could do some sort of deep packet analysis where they actually process your monero P2P links, and see that, oh, this person never received this transaction but only transmitted it. This would sort of, you know, leak information that you're probably the source of it. So, the obvious mitigation to that would be encryption. The difficult part here is we're encrypting something of a very specific size that gets immediately sent to everyone publicly. So these two features are sort of working against each other. And even worse, so MoneroMoo, one of the other contributors added some padding to help mitigate this, so it pads up to the next size boundary hoping to sort of conceal this leakage. The problem is that Monero at it's peak had one transaction every 5.6 seconds. So there's a strong correlation between the size of the, oh, you know what, I don't know why I'm describing this to you when I can show you. [changes slide] There we go, so this is a wire-shark capture, this is on mainnet, I don't mess around with testnet stuff. This is a single connection over mainnet and so the black bars are the total bandwidth and the red bars are the outgoing bandwidth. And so what you'll notice is that there's lots of periods of inactivity and short bursts. And so, well there's some awesome Gimp skills [referring to current slide] but I don't even have arrows I couldn't figure that out, honestly [laughs]. But what you can see is that the, over there to the left there are two block broadcasts that look very similar and there were no transactions downloaded because these are so-called thin blocks or fluffy blocks I think is what we're calling it. So there's very little transmitted, but, again, it still looks very, well, I guess I didn't explain that part, this isactually on a one-second granularity, the amount of bandwidth, so if you tighten up the granularity, you can actually, on the far right, it looks very similar except that this particular peer then downloaded some information from me. And then, just to show you even further this is the zoomed in portion of the transaction, oh yeah I didn't tell you this part I actuall did send a transaction during this time interval too. So I sent real money over this, just for this talk here. So, this transaction I sent was about 2.5 kilobits, and you can see roughly from the chart that, with overhead of the protocol, you see a spike of exactly that amount going over the link. And you can also see there's other periods of inactivity and there's also periods of other activity that's, can't possibly be my transaction due to the different spike levels. I don't think you can see this on, that's probably a little hard to see, one of the interesting things about this connection, I had thirty four connections at the time, and I actually received my own transaction from this person before I sent it out,  which is kind of interesting. You can actually see that in the graph there that's kind of an interesting, so it is, the Monero protocol apparently is a bit chaotic and it's very very, uh, it uses way too much bandwidth I guess would be the simple way to explain it. So now this is the same time period but all of my incoming connections, I botched it so I didn't get the outgoing ones, I had about twenty four incoming connections. And so this is trying to give you the view, if you were running I2P or Tor, this would be kind of what the ISP would see, they would see similar peaks and valleys. So right away I mean you can almost tell immediately I could tell you when I'm running a command where I'm asking every peer, hey what are the peers that you see, I get a big spike of drama coming back at regular intervals, and you can pick this out even over Tor, you can spot it pretty much immediately. Now I do want to state that Tor does some padding in the cell, so it will look slightly different but the padding is pretty minimal. And so again this is the same data points, it will be harder to pick out over Tor though, because, and I guess I didn't explain that part I guess I just kind of assumed that. The difference between Tor is that all of your connections are going to be going over a limited number of TCP connections, so that's why the graphs will look different, there'll be more noise, so to speak, for the ISP to filter through. 

Alright, so, as far as the ISP spying goes, encrypting data, whether it's the P2P links directly or I2P and Tor, I would argue it's a partial solution only because you're somewhat relying on luck. If you're able to hide anything it's because the protocol just happened to be sending something at that particular time period that masks what you're doing. Which is why, in my original forum proposal I proposed adding white noise over I2P. 

And so now we're talking about our favorite that Josh kept talking about, the global passive adversary. The problem with this adversary is that they basically can do a better version of the first spy. If they're able to see multiple points in the network they're not inferring the network topology, they're just seeing the network topology. So this is really hard to defend against. And so, as an example of something speculative they could try to do, even with the white noise, you could try to do the first technique where they make many connections over Tor and then try to deanonymise Tor users. Now that's, I don't want to say that that's easy, but it is, within all the academic literature that is theoretically possible. And so the mitigations, well that's that Dandelion++ thing, uh, that may or not help somewhat. I mean, honestly if you really were concerned about that you'd probably have to go with something more similar to a mixnet, but, we'll get into that. 

So, what is Dandelion++? Hopefully I'll give a quick explanation of that. The idea here is to, well actually they have two goals, especially in the Dandelion++ paper. They're trying to, I guess I'll just show you everything they're trying to do, really provide a lot of information there. They're trying to prevent  basically metatdata leakage about the network information, so again they're trying to prevent against the first type of spy that's making many connections. So, basically every transaction in the first phase, that's the stem phase, is only sent over one connection. The idea there is it reduces the chance for any of these spies to learn about how the transaction is flowing through the network because it reduces the probability that they are receiving the transaction in the first anonymity phase. The second thing is they're choosing outbound connections in the first phase because that, again that limits them targeting a person where they're making lots of incoming connections to you, in order to fill your connection table so that basically you have to send a transaction through them. And then so, the idea is, after it goes, now mind you, this is within the existing P2P network, so after it makes it through several hops only selecting outbound peers, eventually, there's a, at some point it gets spread in the normal fashion. By normal I mean Monero can still improve what it does there too. 

And the other thing I did want to point out, which I didn't think about when I first started this, and this is the last bullet point, which is probably one of the more important ones, Dandelion++ actually makes it easier for the ISP's and these other adversaries.  It wasn't obvious at first, but one of the things is the ISP can see which direction the connection is made. So they immediately know, if they're following the Dandelion protocol, the transactions are only flowing in one way, so the heuristics of filtering out the noise gets even better. And the chaotic like, I'm receiving my own transactoin before sending it is never going to happen. So it actually makes some of the analysis of the other spies easier. But for various reasons Monero is still probably better off by implementing it because that type of spy is going to be the most common. 

Now, I2P and Tor, I think Josh had talked about this already. The main idea of I2P and Tor is just to break apart who the two endpoints of the transaction, of the communication channel are. So, that's why Monero has aways had this on the roadmap because if they use I2P, the idea would be who's ever receiving the transaction wouldn't even know it. So that first type of spy is pretty much completely mitigated because they don't even know the IP of the sender, of the other person on the other end. For some of the more advanced people, particularly the passive adversaries, they may be able to still infer some information. 

Okay, now, what is white noise? I've been mentioning this a lot. This is mentioned in many places in academic literature, so this isnt' anything new. Basically, at regular intervals send a fixed amount of data. If you have no data to send,  you just send, it doesn't really matter what you send, you just send anything, because the entire link is encrypted, so anyone that's observing it doesn't know whether you're sending just dummy data, or whether your sending an actual transaction, or part of a transaction. And so, one of the things that also isn't obvious, and a great paper came many years ago, is, the interval needs to be randomized becuase you can actually detect which branch was taken in the code based on the timings that come out because the intervals wont be exactly precise, they'll be milliseconds off. And somebody actually did the, did a variable test over several router hops and found this out, that this actually is observable several router hops away. So, Monero will have you covered there eventually as well, hopefully. 
So what am I actually saying that will, you know, what are we actually doing in Monero. So the first proposal I think will be, eventually MoneroMoo, myself, and several others will probably have Dandelion++ over IPv4 and 6. For a number of users they don't even want to run I2P, that will be an option that will at least prevent some of the more basic type spying that we've been seeing on bitcoin and these other type of networks. 

Now, for anybody that wants a little bit more, these bullet points are more only, probably more of guidance. I don't think that this is going to be the final solution. The idea is basically, and I don't really want to call it Dandelion++ because it's really only taking some of their techniques and making it harder to, it will create really more plausible deniability on where the origin was coming from. So, what I have right now, at least on my working codebase, is 3 kilobytes of noise every 10 to 15 seconds, but only choosing two senders. And so the transactions will only go out to two senders, kind of like in Dandelion++, and eventually the receiver over I2P or Tor, transfers this into the IPv4 or IPv6 network. The catch is that we have to like pretty much, I'm calling these zones, because they have to be pretty much have to be completely isolated to make sure that there's no metadata leakage across the zones, including, that's why the first bullet point is seperate mempools. If we comingle the mempools, someone that happens to probe your node about something can then observe that, 'Oh you've seen this transaction before. How did you know about it?' and 'I've never seen it yet.' kind of thing. So and this pretty much just highlights I think what I've already talked about. One of the interesting things, the reason I started talking about Dandelion++ is, well there's multiple reasons. One of the things is that, my original proposal was sending white noise to every peer. This had the very bad downside of a lot of bandwidth usage. Or you up the delay interval, but then the transactions take longer to propagate. So, by only using something similar to the Dandelion protocol, you're using less connections to send white noise over. The other advantage this has is, in this mode, anybody that was a global passive adversary, they would be forced to effectively do the first spying technique, they would have to make tons of connections over tor in hopes to deanonymize users. At that point they would then have to then try to infer whheter the transaction came over Tor, and then match it to and endpoint, and then deanonymize that endpoint. And so the plausible deniability, and unfortunately, this is kind of really deep within the Dandelion++ paper, but they sort of talk about this tradeoff. One of the differences between the first Dandelion and Dandelion++ was the first paper only had one incoming and one outgoing in the anonymity phase, whereas the new one has two incoming and two outgoing to the transactions. The idea there is if someone does learn the network topology, if you only have one incoming route and one outgoing route, it's actually the worst case scenario statistically. So, I actually propose that basically every outbound Tor connection is white-noised over a longer interval. And that will then create, you have a ton of incoming nodes, that could be plausible deniability of which link one of these transactions came over mixed with yours, and it goes to only one of ten. So that will be something that we'll have to probably discuss with Monero Research Lab. 

Now, to talk about like all the downsides, which there's a lot. The first one is, you get the maximum privacy if you setup a Tor exit node, or the similar concept in I2P, which right now is manual, and that's probably not going to be satisfactory. There are ways to automate it, but, yeah, it's going to take a lot of work. There's also the obvious downsides of all the bandwidth this is using. That's pretty much why Tor doesn't use white noise. Now their cases are different. They're trying to protect facebook and youtube traffic for some reason, okay, but the amount of noise we'd have to do to protect that traffic has got to be just absurdly high, I don't really know, I've never calculated it. The other downside is, this has the effect of slowing, not only does this have the effect of making the transactions, if you're trying to get your transaction in a timely period, that's just not possible unfortunately with this technique, and it also, it drops the throughput because basically you have to wait and have a queue, and this creates the, it's the equivelant effect of having, you can only send transactions at a 3.93 kilobit/s connection. That's what I'm simulating here in a very bad way. 

So the other thing that's kind of unfortunate is these passive adversaries that can [control] multiple connection points. These sort of regular intervals of white noise probably makes it easier for them to develop the connection flow as it traverses the internet. I don't see a way around that if you're using any P2P network or any TCP connection that's long-lived. and constantly sending data. I mean every time you send a data, it's, because Tor doesn't have any of these counter-measures, there's statistical information that's being leaked either way. 

Now, I've also, I guess I didn't cover this point. Monero, at least currently in the codebase, is only doing transaction broadcasting and a few administration things over Tor and I2P. If we did the full protocol you would get more cover traffic but the downside is there's a bunch of places where we've blocked bad actors, and you really can't block incoming Tor transactions becuase it's just some person who created a new public key, I don't know who it is. 

Now the other downside is it's easier to create more sybil cases, so, if you're worried about black-holing, which has been an ongoing discussion from the original Dandelion paper, this could possibly make it worse because it's easier to create an alias over Tor and I2P, you don't need a new IP address, you just need to create a new public key.

Now this last point, well I don't think we need to cover that cause that's really deep in the details of how it's implemented and that's going to be an ongoing effort I think anyway. So the important thing is probably what is the status of Monero right now. So we've added Socks support, which is, probably not a lot of people probably know what that is, other than the wallet and daemon both have some understanding of an onion and an I2P address and that's as of this last release that just came out. So, if you were to setup a Tor exit node, you can have it forward to your daemon and your wallet can connect to it directly from the wallet over Tor. It connects to a Tor daemon and forwards all the traffic over Tor. You can also, if you knew some cool person that was allowing you to forward your transactions over Tor and they gave you their hidden service, you can do that already now. But again though, none of this is automated. The whitenoise is in progress, I have a laptop somewhere that has a lot of that in, actually it's pretty much done. And one of the advantages, I managed to get some optimizations in there as well, so that's a nice benefit. There will be a partial Dandelion++ implementation coming out, by partial I mean the bits needed so that someone doesn't have to immediately have to refactor all the code I just did will be in there. And I think this proposal, what I'm doing over Tor and I2P will definitely have to change as time goes along because there's just a lot of details that need to be worked out. But I think this will be much better than what Monero's doing right now which is pretty much nothing, so, there's that. I think that is, yep that's it.

Question from Audience Member 1:
I've just got a quick one about the mempools per zone idea, do you see that causing problems with transactoin censorship if certain miners are running those for clearnet and I2P and Tor where they can see transactions between the distinct zones and choose to include only clearnet or only Tor and I2P, etc.
Answer:
So that's what the black-holing I was referring to, the Dandelion paper discussed that as well, the Dandelion paper actually suggests separate mempools as well, and that's what the reference implementation did, and that is a problem because if you're only sending it to one node for several hops before transmitting it to all, any one of those nodes can just block you. So there is a process, and I didn't discuss that part with anyone in the Dandelion++ protocol, that is part of the, there's an embargo timer. So each node who's honestly behaving sets a timer, and if they don't see that transaction come back to them, they're supposed to fluff it out. Now, I believe that's how it works, I haven't implemented that part at all, but it's something along those lines. So that's discussed across, mainly probably in the original paper but probably in the second one as well. 

Question 1 from Audience Member 2:
You showed the traffic graph while you were connected to Tor?
Answer: No I'm sorry, I should clarify. I was trying to show what it might look like over Tor, so I was still running the same protocol, so the only, the major difference is going to be the incoming and outgoing will be much more confusing and then there'll be padding as well. So it will be much harder to infer anything. The problem though is, we have decided, at least temporarily, to only run administration traffic and transaction broadcast over Tor. So, there will be a lot less noise I think. So we either have to do everything over Tor, with the other downsides that you can't really ban, block, we have a blocklist locally in the node for bad actors over these networks, and there's really no way to do that so that's...I'm sorry I didn't mean to cut you off but if you had any more questions than that...

Question 2 from Audience Member 2:
Did you do any analysis between the different message patterns between I2P and Tor?
Answer: 
Oh, no I haven't done any, no I see what you're saying, you mean analysis on which one is preferred? No that would a very interesting work that should be done, because I feel like less people looked at I2P, that's usually the knock against it but it would be interesting because they have an entirely, I think what he's referring to here is they have an entirely different design in how they route messages throughout the network. So they use an asymetric pattern. On Tor the messages come and go over the same links, whereas I2P come over different links. So that has always felt like to me would be harder to analyze, but without actually going through and thinking through all the details, because you basically have to think through if I were writing a program to deanonymize it, what would that look like? And, no I have not done that, sadly. I don't know anybody that has, but if anybody knows...

Question from Audience Member 3:
So I've heard just kind of anecdotally that the Tor network is significantly larger than the I2P network just from being more popular, so I was curious if there was any way to get kind of, at least order of magnitude, estimate on the number of nodes in either of the networks so that you can kind of get an idea for what size botnet would be required to make this kind of successful attack against one or, either of the networks?
Answer:
Yeah the big thing is the amount of people covering your traffic there, the amount of plausible deniability. I don't know anyone that's analyzed those two networks, I'm sure there's information about that though. I don't know it offhand.

Audience member 4 joins the discussion with statistics on number of nodes in I2P and Tor and then gets the microphone:
Yeah I was just saying it's about fifty thousand in I2P and about seven thousand in Tor but the major difference is that every user in I2P is also a router so that's a massive difference, and the Tor routers are just volunteers who setup nodes specifically for that purpose.
Lee:
Right, so even though Tor has less nodes it probably has more bandwidth.
Audience Member 4:
Correct.
Lee: 
Yeah, and I think their model of making everyone a router is much preferred, because one of the things now is if you're using Tor, this is probably why, I don't know why the community originally selected I2P but one of the problems is it also makes it even harder if you're routing other people's data along with your own. That sort of makes things even more complicated. So that's why I said at a glance I always felt like I2P is probably better in that regard because of several design phases but like I said I've never actually tried to think all of them through. 

Question from Audience Member 5:
One question that came to my mind is what happens if you setup a full Monero node but you don't use it for your own transactions and then instead connect to another node to send your own transactions so as, for example to defeat your ISP spying on you, or at least confuse them somewhat. 
Answer:
Yeah because then, I've thought about some of the techniques, one of the other issues I didn't get to in this talk, I realize I forgot about, there's all kinds of side channels where, if you're running a node here and I'm connecting on my phone back to my node at home, there's going to be a blip of my transaction size over some random SSL connection or whatever and then it immediately comes back out, so that might work but there's always the possibility, it depends how you get it to that user, that other node, and how aggressively the ISP is monitoring it. Because they'll see another connection going out of a similar size, but again it wouldn't be an easy correlation, but the correlation is there. But yeah. Those are my thoughts on that. Does that answer it well enough? 



